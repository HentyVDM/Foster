import React, { useEffect, useMemo, useRef, useState } from "react";

// --- Lightweight helpers ---
const uid = () => Math.random().toString(36).slice(2, 10);
const todayISO = () => new Date().toISOString().slice(0, 10);
const isSameDay = (a, b) => a && b && a.slice(0, 10) === b.slice(0, 10);

// Friendly demo avatars
const Avatar = ({ name }) => {
  const initials = name
    .split(" ")
    .map((n) => n[0]?.toUpperCase())
    .slice(0, 2)
    .join("");
  return (
    <div className="w-8 h-8 rounded-full bg-slate-200 text-slate-700 grid place-items-center text-xs font-semibold">
      {initials || "?"}
    </div>
  );
};

// Button primitive
const Button = ({ className = "", children, ...props }) => (
  <button
    className={`px-3 py-2 rounded-2xl shadow-sm border border-slate-200 hover:shadow-md active:shadow-sm transition text-sm ${className}`}
    {...props}
  >
    {children}
  </button>
);

// Card primitive
const Card = ({ className = "", children }) => (
  <div className={`rounded-3xl border border-slate-200 bg-white shadow-sm ${className}`}>
    {children}
  </div>
);

// Input primitive
const Input = (props) => (
  <input
    {...props}
    className={`w-full px-3 py-2 rounded-xl border border-slate-300 focus:outline-none focus:ring-2 focus:ring-indigo-400 ${props.className || ""}`}
  />
);

// Toggle primitive
const Toggle = ({ checked, onChange }) => (
  <button
    onClick={() => onChange(!checked)}
    className={`w-11 h-6 rounded-full relative transition ${
      checked ? "bg-indigo-500" : "bg-slate-300"
    }`}
  >
    <span
      className={`absolute top-0.5 left-0.5 h-5 w-5 rounded-full bg-white shadow transition-transform ${
        checked ? "translate-x-5" : "translate-x-0"
      }`}
    />
  </button>
);

// --- Persistent state ---
const STORAGE_KEY = "foster_state_v1";
const demoState = {
  me: { id: uid(), name: "You" },
  group: { id: uid(), name: "City Church", invite: "FOSTER-123" },
  habits: [
    { id: uid(), title: "Prayer (10 min)", cadence: "daily", streak: 3, lastCheckIn: "", history: [] },
    { id: uid(), title: "Bible Reading", cadence: "daily", streak: 1, lastCheckIn: "", history: [] },
    { id: uid(), title: "Sabbath (24h)", cadence: "weekly", streak: 2, lastCheckIn: "", history: [] },
  ],
  feed: [
    {
      id: uid(),
      user: "Anna Lee",
      type: "checkin",
      text: "Checked in: Prayer (10 min)",
      date: new Date().toISOString(),
      likes: 2,
      comments: [
        { id: uid(), user: "Marcus", text: "Cheering you on!" },
        { id: uid(), user: "Sarah", text: "Amen üôè" },
      ],
    },
  ],
};

function usePersistentState() {
  const [state, setState] = useState(() => {
    const saved = localStorage.getItem(STORAGE_KEY);
    return saved ? JSON.parse(saved) : demoState;
  });
  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
  }, [state]);
  return [state, setState];
}

// --- Habit logic ---
function checkInHabit(habit) {
  const today = todayISO();
  const weekly = habit.cadence === "weekly";
  const last = habit.lastCheckIn;
  let streak = habit.streak || 0;

  // Update streak if it's a new day/week
  const isNewPeriod = weekly
    ? // new ISO week: compare year-week numbers
      (() => {
        const toYW = (d) => {
          const dt = new Date(d);
          const dayNum = (dt.getUTCDay() + 6) % 7; // Monday=0
          dt.setUTCDate(dt.getUTCDate() - dayNum + 3);
          const firstThursday = new Date(Date.UTC(dt.getUTCFullYear(), 0, 4));
          const week =
            1 +
            Math.round(
              ((dt - firstThursday) / 86400000 - 3 + ((firstThursday.getUTCDay() + 6) % 7)) /
                7
            );
          return `${dt.getUTCFullYear()}-${week}`;
        };
        return toYW(today) !== toYW(last || "1970-01-01");
      })()
    : !isSameDay(today, last);

  if (isNewPeriod) streak += 1;

  return {
    ...habit,
    streak,
    lastCheckIn: today,
    history: [...(habit.history || []), { date: today }],
  };
}

// --- Components ---
const HabitCard = ({ habit, onCheckIn, onDelete }) => (
  <Card className="p-4 flex items-center gap-3">
    <div className="grow">
      <div className="flex items-center gap-2">
        <span className="inline-block px-2 py-0.5 text-[10px] rounded-full bg-indigo-50 text-indigo-700 uppercase tracking-wide">{habit.cadence}</span>
        <h3 className="font-semibold text-slate-800">{habit.title}</h3>
      </div>
      <div className="mt-2 text-xs text-slate-500">Streak: <span className="font-semibold text-slate-700">{habit.streak || 0}</span></div>
    </div>
    <div className="flex items-center gap-2">
      <Button
        className={`${
          isSameDay(habit.lastCheckIn, todayISO())
            ? "bg-emerald-500 text-white border-emerald-500"
            : "bg-indigo-600 text-white border-indigo-600"
        }`}
        onClick={onCheckIn}
      >
        {isSameDay(habit.lastCheckIn, todayISO()) ? "Checked" : "Check in"}
      </Button>
      <Button className="text-slate-500 hover:text-rose-600" onClick={onDelete}>
        Delete
      </Button>
    </div>
  </Card>
);

const NewHabitForm = ({ onAdd }) => {
  const [title, setTitle] = useState("");
  const [daily, setDaily] = useState(true);
  return (
    <Card className="p-4">
      <div className="flex flex-col sm:flex-row gap-3 items-center">
        <Input
          placeholder="Add a habit (e.g., Prayer 10 min, Bible Reading)"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
        <div className="flex items-center gap-2">
          <span className="text-xs text-slate-600">Daily</span>
          <Toggle checked={daily} onChange={setDaily} />
          <span className="text-xs text-slate-600">Weekly</span>
        </div>
        <Button
          className="bg-slate-900 text-white border-slate-900"
          onClick={() => {
            if (!title.trim()) return;
            onAdd({ id: uid(), title: title.trim(), cadence: daily ? "daily" : "weekly", streak: 0, lastCheckIn: "", history: [] });
            setTitle("");
          }}
        >
          Add
        </Button>
      </div>
    </Card>
  );
};

const FeedItem = ({ item, onLike, onComment }) => {
  const [text, setText] = useState("");
  return (
    <Card className="p-4">
      <div className="flex items-start gap-3">
        <Avatar name={item.user} />
        <div className="grow">
          <div className="flex items-center gap-2">
            <div className="font-medium text-slate-800">{item.user}</div>
            <div className="text-xs text-slate-500">{new Date(item.date).toLocaleString()}</div>
          </div>
          <div className="mt-1 text-slate-700 text-sm">{item.text}</div>
          <div className="mt-3 flex items-center gap-3 text-sm">
            <Button onClick={onLike} className="border-slate-300">üëç Like ({item.likes})</Button>
          </div>
          <div className="mt-3 space-y-2">
            {item.comments?.map((c) => (
              <div key={c.id} className="flex items-start gap-2">
                <Avatar name={c.user} />
                <div>
                  <div className="text-xs text-slate-500">{c.user}</div>
                  <div className="text-sm text-slate-700">{c.text}</div>
                </div>
              </div>
            ))}
          </div>
          <div className="mt-3 flex gap-2">
            <Input placeholder="Write a comment‚Ä¶" value={text} onChange={(e) => setText(e.target.value)} />
            <Button
              className="bg-indigo-600 text-white border-indigo-600"
              onClick={() => {
                if (!text.trim()) return;
                onComment(text.trim());
                setText("");
              }}
            >
              Comment
            </Button>
          </div>
        </div>
      </div>
    </Card>
  );
};

const Header = ({ group }) => (
  <div className="flex items-center justify-between">
    <div>
      <h1 className="text-2xl font-bold tracking-tight text-slate-900">Foster</h1>
      <div className="text-slate-500 text-sm">{group?.name || "My Community"}</div>
    </div>
    <div className="flex items-center gap-2">
      <span className="text-xs text-slate-600">Invite code:</span>
      <code className="px-2 py-1 rounded-lg bg-slate-100 text-slate-800 text-xs">{group?.invite || ""}</code>
    </div>
  </div>
);

const Tabs = ({ tab, setTab }) => (
  <div className="grid grid-cols-2 p-1 rounded-2xl bg-slate-100 w-full sm:w-auto">
    {[
      ["habits", "My Habits"],
      ["community", "Community"],
    ].map(([k, label]) => (
      <button
        key={k}
        onClick={() => setTab(k)}
        className={`px-4 py-2 rounded-xl text-sm font-medium transition ${
          tab === k ? "bg-white shadow border border-slate-200" : "text-slate-600"
        }`}
      >
        {label}
      </button>
    ))}
  </div>
);

const ExportImport = ({ state, setState }) => {
  const fileRef = useRef(null);
  const download = () => {
    const blob = new Blob([JSON.stringify(state, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `foster-export-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };
  const onFile = (e) => {
    const file = e.target.files?.[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => {
      try {
        const data = JSON.parse(String(reader.result));
        setState(data);
      } catch (e) {
        alert("Invalid file");
      }
    };
    reader.readAsText(file);
  };
  return (
    <div className="flex items-center gap-2">
      <Button onClick={download} className="border-slate-300">Export</Button>
      <input ref={fileRef} type="file" accept="application/json" hidden onChange={onFile} />
      <Button onClick={() => fileRef.current?.click()} className="border-slate-300">Import</Button>
    </div>
  );
};

export default function FosterApp() {
  const [state, setState] = usePersistentState();
  const [tab, setTab] = useState("habits");

  const addHabit = (habit) => setState({ ...state, habits: [habit, ...state.habits] });
  const deleteHabit = (id) => setState({ ...state, habits: state.habits.filter((h) => h.id !== id) });
  const checkIn = (habit) => {
    const updated = checkInHabit(habit);
    const feedItem = {
      id: uid(),
      user: state.me.name,
      type: "checkin",
      text: `Checked in: ${habit.title}`,
      date: new Date().toISOString(),
      likes: 0,
      comments: [],
    };
    setState({
      ...state,
      habits: state.habits.map((h) => (h.id === habit.id ? updated : h)),
      feed: [feedItem, ...state.feed],
    });
  };

  const likeItem = (id) =>
    setState({ ...state, feed: state.feed.map((f) => (f.id === id ? { ...f, likes: (f.likes || 0) + 1 } : f)) });

  const commentItem = (id, text) =>
    setState({
      ...state,
      feed: state.feed.map((f) =>
        f.id === id ? { ...f, comments: [...(f.comments || []), { id: uid(), user: state.me.name, text }] } : f
      ),
    });

  const today = todayISO();
  const completedToday = state.habits.filter((h) => isSameDay(h.lastCheckIn, today)).length;

  return (
    <div className="min-h-[80vh] w-full bg-gradient-to-b from-slate-50 to-white p-4 sm:p-8">
      <div className="max-w-4xl mx-auto space-y-6">
        <Header group={state.group} />
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
          <Tabs tab={tab} setTab={setTab} />
          <ExportImport state={state} setState={setState} />
        </div>

        {tab === "habits" ? (
          <div className="space-y-4">
            <Card className="p-4 bg-indigo-600 text-white border-indigo-600">
              <div className="text-sm opacity-90">Today</div>
              <div className="text-2xl font-semibold">{completedToday} completed</div>
            </Card>
            <NewHabitForm onAdd={addHabit} />
            <div className="grid gap-3">
              {state.habits.map((h) => (
                <HabitCard
                  key={h.id}
                  habit={h}
                  onCheckIn={() => checkIn(h)}
                  onDelete={() => deleteHabit(h.id)}
                />
              ))}
              {state.habits.length === 0 && (
                <Card className="p-6 text-center text-slate-600">No habits yet. Add one above to get started.</Card>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-3">
            {state.feed.map((f) => (
              <FeedItem
                key={f.id}
                item={f}
                onLike={() => likeItem(f.id)}
                onComment={(text) => commentItem(f.id, text)}
              />
            ))}
            {state.feed.length === 0 && (
              <Card className="p-6 text-center text-slate-600">Your community feed is quiet. Check in on a habit to post!</Card>
            )}
          </div>
        )}

        <footer className="pt-4 text-center text-xs text-slate-500">
          Built with ‚ù§Ô∏è for communities walking in the way of Jesus.
        </footer>
      </div>
    </div>
  );
}
